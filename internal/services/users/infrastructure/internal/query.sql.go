// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package internal

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const create = `-- name: Create :one
INSERT INTO "user" (
  "createdAt", "updatedAt", id, email, nickname, providers
) VALUES (
  NOW(), NOW(), $1, $2, $3, $4
)
RETURNING "createdAt", "updatedAt", "deletedAt", id, email, nickname, providers
`

type CreateParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Nickname  string    `json:"nickname"`
	Providers []string  `json:"providers"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, create,
		arg.ID,
		arg.Email,
		arg.Nickname,
		pq.Array(arg.Providers),
	)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.Email,
		&i.Nickname,
		pq.Array(&i.Providers),
	)
	return i, err
}

const delete = `-- name: Delete :exec
UPDATE "user" SET "deletedAt" = NOW()
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const findOne = `-- name: FindOne :one
SELECT "createdAt", "updatedAt", "deletedAt", id, email, nickname, providers FROM "user" WHERE id = $1
`

func (q *Queries) FindOne(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findOne, id)
	var i User
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ID,
		&i.Email,
		&i.Nickname,
		pq.Array(&i.Providers),
	)
	return i, err
}

const list = `-- name: List :many
SELECT "createdAt", "updatedAt", "deletedAt", id, email, nickname, providers FROM "user" WHERE "deletedAt" IS NULL
`

func (q *Queries) List(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ID,
			&i.Email,
			&i.Nickname,
			pq.Array(&i.Providers),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
